import subprocess
import chardet


# proc = subprocess.Popen('dir', shell=True, stdout=subprocess.PIPE)
# out = proc.stdout.read()
# enc = chardet.detect(out)
# print(out.decode(enc['encoding']))


def host_ping(addrs):
    for addr in addrs:
        args = ['ping', '-c 3', addr]
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)

        out = proc.stdout.read()

        enc = chardet.detect(out)
        print(out.decode(enc['encoding']))


def host_range_ping(addr, d=0):
    if d:
        lst = addr.split('.')
        last = int(lst[3])
        for i in range(d):
            print(d)
        else:
            host_ping(addr, d=4)


host_ping(['122.254.254.12', '10.254.254.13', '192.168.254.13', '122.254.254.15'])

# host_range_ping('122.254.254.12', d=4)

#
#

# Написать функцию host_ping(), в которой с помощью утилиты ping будет проверяться доступность сетевых узлов.
# Аргументом функции является список, в котором каждый сетевой узел должен быть представлен именем хоста или
# ip-адресом. В функции необходимо перебирать ip-адреса и проверять их доступность с выводом соответствующего
# сообщения («Узел доступен», «Узел недоступен»). При этом ip-адрес сетевого узла должен создаваться с помощью
# функции ip_address().


# Написать функцию host_range_ping() для перебора ip-адресов из заданного диапазона. Меняться должен только
# последний октет каждого адреса. По результатам проверки должно выводиться соответствующее сообщение.


# Написать функцию host_range_ping_tab(), возможности которой основаны на функции из примера 2. Но в данном
# случае результат должен быть итоговым по всем ip-адресам, представленным в табличном формате (использовать
# модуль tabulate). Таблица должна состоять из двух колонок и выглядеть примерно так:
# Reachable
# -------------
# 10.0.0.1
# 10.0.0.2
# Unreachable
# -------------
# 10.0.0.3
# 10.0.0.4


# Продолжаем работать над проектом «Мессенджер»:

# Реализовать скрипт, запускающий два клиентских приложения: на чтение чата и на запись в него.
# Уместно использовать модуль subprocess);

# Реализовать скрипт, запускающий указанное количество клиентских приложений.


# *В следующем уроке мы будем изучать дескрипторы и метаклассы. Но вы уже сейчас можете перевести часть кода из
# функционального стиля в объектно-ориентированный. Создайте классы «Клиент» и «Сервер», а используемые функции
# превратите в методы классов.
